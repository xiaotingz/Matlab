function [dist_proj_sign, dist_proj_abs, features]  = calcFaceMigBySVMPlaneProj(features, eps, x_to_y, tri_node_1, tri_node_2)
% 
% ############################################################################
% Input
%     - features = [n+n', 9], [face_id, node_id, coordinates, normals, cluster_id] 
%         including nodes of both faces
%     - x_to_y = [n, 1], a mapping from nodes_1 to nodes_2
%         this is to calculate direct node_pair_distance, for determining good median planes.
%     - eps, scalar, the tolarence for deciting if a fitted SVM median plane is good.
% Output
%     - dist_proj_sign & dist_proj_abs
%         If interwining shouldn't be considered as migration, use
%         mig_sign. If interwining should be consider as migration, use
%         mig_abs
%     - bad_fit
%         If most nodes on the face has been fitted.
%     - features
%         the cluster_id has been updated.
% Notes
%     - This script can be compared to the other two projection methods
%     also: MigrationByLinearRegPlaneProj.m, MigrationByLocalNormProj.m, MigrationByPillarHeight.m
%     - Dependencies: updateKmeansClusterAssign.m and KmeansAsNormalImproved.m
%     - The logic is as follows: try to find some good median planes
%     between the two faces and project distance between tracked node pairs
%     onto the mediam plane. 
%     - More than one median plane would be needed if the planes are intersecting, 
%     interwining, or curved planes. In such cases, nodes need to be
%     clustered and median planes are fitted within each cluster. 
%     - K-means clustering, break if too many (>10) median planes are needed.
%     - MATLAB svm paramters to play with 
%         !!! 'BoxConstraint', 'Standardize', 'OutlierFraction' !!!         
% ############################################################################
% ----------------------- load debug data -----------------------
% load('181004_SVMcurv_pair1674')
% node_id_1 = face_node_id_an4;
% node_id_2 = face_node_id_an5;
% node_id_1 = node_id_an4;
% node_id_2 = node_id_an5;
% tri_node_1 = face_tri_node_an4;
% tri_node_2 = face_tri_node_an5;
% eps = 0.1;
% ---------------------------------------------------------------

if nargin == 3
    naive_kmeans = true;
elseif nargin == 5
    naive_kmeans = false;
end

% ##### Prepare to Start #####
max_kmeans_loop = 1000;
coord_1 = features(features(:,1)==1, 3:5);
normal_1 = features(features(:,1)==1, 6:8);
coord_2 = features(features(:,1)==2, 3:5);
normal_2 = features(features(:,1)==2, 6:8);
coord_1_corresp = coord_2(x_to_y, :); 
normal_1_corresp = normal_2(x_to_y, :);
dist_direct = vecnorm(coord_1 - coord_1_corresp, 2, 2);
max_num_cluster = 10;

% ################################## Fit First SVM Plane ##################################
% """
% - Good median plane is characterized as most projected migration distance 
% should be smaller than the direct migration distance. 
% - If one SVM median plane is not good, needs to cluster nodes and fit
% median planes within each cluster.
% """
% ----- Find SVM plane -----
X = features(:,3:5);
Y = features(:,1);
SVMModel = fitcsvm(X, Y, 'KernelFunction', 'linear');
normal = SVMModel.Beta;
bias = SVMModel.Bias;

% ---- Project to see if this plane is good enough -----
% """ 
% - A median plane is bad if: 1) there exists many nodes for which the node
% to median plane distance is larger than the direct distance between node
% pairs. 2) normal of the median plane is far away from the average normal
% of either planes. 
% - Point-plane distance ref: http://mathworld.wolfram.com/Point-PlaneDistance.html
% """
dist_proj_1 = (sum(coord_1.*normal', 2) + bias*ones(size(coord_1, 1), 1)) ./ norm(normal);
dist_proj_2 = (sum(coord_1_corresp.*normal', 2) + bias*ones(size(coord_1_corresp, 1), 1)) ./ norm(normal);
dist_proj_sign = dist_proj_1 - dist_proj_2;
dist_proj_abs = abs(dist_proj_1) + abs(dist_proj_2);
proj_dists_toolong = (sum(dist_direct - abs(dist_proj_abs) < 0) / length(dist_direct)) > eps; 
avg_normal_1 = sum(normal_1) / sum(features(:,1)==1);
avg_normal_2 = sum(normal_1_corresp) / sum(features(:,1)==2);
avg_normal_dists = atan2d(norm(cross(avg_normal_1,avg_normal_2)),dot(avg_normal_1,avg_normal_2));
median_normal_dist_1 = atan2d(norm(cross(avg_normal_1,normal)),dot(avg_normal_1,normal));
median_normal_dist_2 = atan2d(norm(cross(avg_normal_2,normal)),dot(avg_normal_2,normal));
plane_normal_bad = (median_normal_dist_1 > avg_normal_dists*(1+eps) && median_normal_dist_2 > avg_normal_dists*(1+eps));
need_another_cluster = proj_dists_toolong || plane_normal_bad;
% need_another_cluster = proj_dists_toolong;
bad_fit = false;

% ----- Record the SVM plane parameters -----
svm_param = [];
svm_param = [svm_param; normal', bias];



% ################################## K-means ################################## 
% """
% - if nargin == 3 ---> Naive K-means
% - if nargin == 5 ---> Normal improved K-means
% - Note in each iteration, only nodes in the imperfect clusters will be reclustered. Nodes that
% already found a good median plane will maintain their cluster_id. 
% """
if need_another_cluster
    num_cluster = 1;
    num_good_clusters = 0;
    mask_to_cluster = boolean(ones(size(features, 1), 1));
    dist_proj_sign = zeros(size(dist_direct));
end
while need_another_cluster
    num_cluster = num_cluster + 1;
    
    % ----- Check if reached max #cluster -----
    if num_cluster > max_num_cluster
        disp(' '); warning('Too many SVM median planes are needed in MigrationBySVMPlaneProj.m. Check the node!'); disp(' ');
%         bad_fit = true;
        mask_goodcluster = (features(:,end) <= num_good_clusters );
        if sum(mask_goodcluster) < size(features, 1) * (1 - eps)
            bad_fit = true;
        end
    end
    
    % ----- Recluster nodes in the bad clusters only -----
    if naive_kmeans
        cluster_id_new = kmeans(features(mask_to_cluster, 3:5), num_cluster - num_good_clusters + 1);
    else
        [~, cluster_id_new] = KmeansAsNormalImproved(features, mask_to_cluster, num_cluster - num_good_clusters + 1, tri_node_1, tri_node_2);
    end
    
    features(mask_to_cluster, end) = cluster_id_new + num_good_clusters;
    
    % ----- Fit SVM plane to every cluster -----
    mask_to_cluster = boolean(zeros(size(features, 1), 1));
    need_another_cluster = false;
    for i = 1+num_good_clusters : num_cluster
        mask_cluster_i = (features(:, end) == i);
        % --- if a cluster includes no more than 4 nodes, ignore this cluster ---
        if sum(mask_cluster_i) <= 4
            mask_to_cluster(mask_cluster_i) = true;
            continue
        else
            X = features(mask_cluster_i, 3:5);
            Y = features(mask_cluster_i, 1);
            SVMModel = fitcsvm(X, Y,'KernelFunction','linear', 'Standardize',false);
            normal = SVMModel.Beta;
            bias = SVMModel.Bias;

             % ----- Check if cluster_i is good -----
            mask_cluster_i_1 = mask_cluster_i(1:size(coord_1, 1));
            dist_proj_1 = (sum(coord_1(mask_cluster_i_1, :).*normal', 2) ...
                + bias*ones(sum(mask_cluster_i_1), 1)) ./ norm(normal);
            dist_proj_2 = (sum(coord_1_corresp(mask_cluster_i_1, :).*normal', 2) ...
                + bias*ones(sum(mask_cluster_i_1), 1)) ./ norm(normal);
            dist_proj_abs(mask_cluster_i_1) = abs(dist_proj_1) + abs(dist_proj_2);
            proj_dists_toolong =  (sum(dist_direct(mask_cluster_i_1) - dist_proj_abs(mask_cluster_i_1) < 0) ...
                / sum(mask_cluster_i_1)) > eps;
            avg_normal_1 = sum(normal_1(mask_cluster_i_1,:), 1) / sum(mask_cluster_i_1);
            avg_normal_2 = sum(normal_1_corresp(mask_cluster_i_1,:), 1) / sum(mask_cluster_i_1);
            avg_normal_dists = atan2d(norm(cross(avg_normal_1,avg_normal_2)),dot(avg_normal_1,avg_normal_2));
            median_normal_dist_1 = atan2d(norm(cross(avg_normal_1,normal)),dot(avg_normal_1,normal));
            median_normal_dist_2 = atan2d(norm(cross(avg_normal_2,normal)),dot(avg_normal_2,normal));
            plane_normal_bad = (median_normal_dist_1 > avg_normal_dists*(1+eps) && median_normal_dist_2 > avg_normal_dists*(1+eps));
    %         this_cluster_bad = proj_dists_toolong || plane_normal_bad;
            this_cluster_bad = proj_dists_toolong;


            if this_cluster_bad == true
                mask_to_cluster(mask_cluster_i) = true;
                need_another_cluster = true;
            else
                num_good_clusters = num_good_clusters + 1;
                svm_param = [svm_param; normal', bias];
                dist_proj_sign(mask_cluster_i_1) = dist_proj_1 - dist_proj_2;
                features(mask_cluster_i, end) = num_good_clusters * ones(sum(mask_cluster_i), 1);
            end
        end
    end 
end


% mig_sign = sum(dist_proj_sign)/length(dist_proj_sign);
% mig_abs = sum(abs(dist_proj_sign))/length(dist_proj_sign);
% mig_svm_proj = [mig_sign, mig_abs, bad_fit];

end

% plotSVMPlane(features, face_tri_node_an4, face_tri_node_an5, x_to_y)
% title('Naive K-means')




% mahal_dist = mahal(face_tri_normal_an4, face_tri_normal_an4);
% prob = 1 - chi2cdf(mahal_dist,3);




