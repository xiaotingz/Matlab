% function mask_ctwin = checkIfCoherentTwin(file, face_to_calc, thres_g, thres_n)
% ############################################################################
% * Input 
%     - face_to_calc = [n, 2], labels of the grain faces of interest.
%     - thres_norm, the threshold for angle between face_avg_norm and [111]
%  * Output
%     - mask_ctwin = [n, 1]
%  * Notes
%     - Mainly designed to check if twins are coherent or not. Use together
%     with getFaceRFvecs.m
% ############################################################################
% % ------------------ load data for debug --------------------
file = ('/Users/xiaotingzhong/Desktop/Datas/Ni_an4_5/An4new6_fixedOrigin_smooth.dream3d');
face_to_calc = tracked_uniqueface_an4(mask_twin, :);
thres_g = 0.06;
thres_n = 10;
% %-----------------------------------------------------------
% ##### Load and Clean Data #####
normal_ctwin = [1,1,1]';
normal_ctwin = normal_ctwin/sqrt(3);
rf_vec_twin = [1,1,1]*tand(60/2);
facelabel = double(h5read(file,'/DataContainers/TriangleDataContainer/FaceData/FaceLabels')).';
tri_normal = double(h5read(file,'/DataContainers/TriangleDataContainer/FaceData/FaceNormals'))';
mask_inner = all(facelabel > 0, 2);
facelabel = facelabel(mask_inner, :);
tri_normal = tri_normal(mask_inner, :);


% ##### Get the Family of 111 direction #####
O = CrysSym;
ctwin_norm_family = zeros(24, 3);
for i = 1:size(O, 3)
    ctwin_norm_family(i, :) = O(:,:,i)*normal_ctwin;
end
ctwin_norm_family = unique(ctwin_norm_family, 'rows');
ctwin_norm_family = reshape(unique(ctwin_norm_family', 'rows'), 1, []);


% ##### First Filter Out non-twin Misorientations #####
% rfvec_ctwin = repmat(rfvec_ctwin, size(face_to_calc, 2), 1);
% [rfvecs]  = getFaceRFvecs(file, face_to_calc);
% mask_ctwin = vecnorm(rfvecs - rfvec_ctwin, 2, 2) < thres_g;
mask_ctwin = ones(size(face_to_calc, 1))

% for i = 1:size(face_to_calc, 1)
i=2;
    if mask_ctwin

        % ##### Get Grain Face Avg Normal #####
        % ----- Get triangles on the objective face -----
        mask_objface = (facelabel(:,1) == face_to_calc(i, 1) & facelabel(:,2) == face_to_calc(i, 2) |...
            facelabel(:,1) == face_to_calc(2) & facelabel(:,2) == face_to_calc(1));
        mask_reverse = facelabel(mask_objface,1) > facelabel(mask_objface,2);

        % ----- Get triangle normals, adjust order -----
        facetri_normal = tri_normal(mask_objface, :);
        facetri_normal(mask_reverse, :) = - facetri_normal(mask_reverse, :);


    %     % ----- Average Face normal -----
    %     avg_normal = sum(facetri_normal)/size(facetri_normal, 1);
    %     avg_normal = avg_normal/norm(avg_normal);

        % ##### Check if Angle Within Threshold #####
    %     inter_angle = abs(atand(norm(cross(avg_normal, normal_ctwin))/dot(avg_norma, normal_ctwin)));
        normal_ctwin_mat = repmat(ctwin_norm_family, size(facetri_normal, 1), 1);
        angle_diffs =  abs(atand(vecnorm(cross(facetri_normal, normal_ctwin_mat, 2), 2, 2)./dot(facetri_normal, normal_ctwin_mat, 2)));

        if sum(angle_diffs < thres_norm) > length(angle_diffs)*0.8
            mask_ctwin(i) = true;
        end
    end
% end
    
    
    










